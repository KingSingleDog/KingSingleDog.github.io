<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kingsingledog.github.io/</id>
    <title>楸</title>
    <updated>2020-05-31T04:56:50.935Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kingsingledog.github.io/"/>
    <link rel="self" href="https://kingsingledog.github.io/atom.xml"/>
    <subtitle>有些事情，现在不做，一辈子都不会再做了。</subtitle>
    <logo>https://kingsingledog.github.io/images/avatar.png</logo>
    <icon>https://kingsingledog.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 楸</rights>
    <entry>
        <title type="html"><![CDATA[心情随笔]]></title>
        <id>https://kingsingledog.github.io/post/xin-qing-sui-bi/</id>
        <link href="https://kingsingledog.github.io/post/xin-qing-sui-bi/">
        </link>
        <updated>2020-05-14T03:50:21.000Z</updated>
        <content type="html"><![CDATA[<p>一转眼就五月十四了，距离2020高考还有五十几天，最近备考的自我感觉良好，虽然我成绩不太好，但相对过去的自己却也是真的有在进步，在剩下的这些日子就继续稳步推进呗，应该能考到一个比较理想的大学的，hhhh。<br>
最近这几天有在跑步，都是在下午下课后和阿旭、淇淇他们一起去跑的，每天那时候都是满满一身汗，舒服了。虽然听说运动可以促进多巴胺分泌，有助于复习，可是我却没感觉到有明显的改变，还是很喜欢乱想、走神。<br>
为了能充实好剩下的这几十天，我打算开始做一下子弹笔记了，别问我为什么，问就是因为这种笔记方式很符合程序员的风格，哈哈。其实在暑假的时候我就已经有打算开始写子弹笔记了，不过没有坚持多久，而且做的笔记也并不规范，所以今天借着胃炎的理由请假回家了一趟，顺便重温一下子弹笔记的规则。</p>
<p>子弹笔记步骤：<br>
一、创建索引<br>
二、创建未来记录<br>
1. 标上页码5~8<br>
2. 把这两面分成六等分<br>
3. 在每一栏内写上今年剩下的月份<br>
4. 填入未来任务和事件<br>
5. 填入索引页<br>
三、创建月度记录<br>
1. 标上页码9~10<br>
2. 以月份作为标题<br>
3. 左边写日历（记录大事情），右边写上任务（待办）<br>
4. 填入索引页<br>
四、杂项<br>
1. 阅读计划<br>
2. 项目计划<br>
3. 其他计划<br>
4. 购物清单<br>
五、创建每日记录<br>
1. 标上页码<br>
2. 以日期作标题<br>
3. 记入任务<br>
4. 无须填入索引页</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[安装 Node.js]]></title>
        <id>https://kingsingledog.github.io/post/an-zhuang-nodejs/</id>
        <link href="https://kingsingledog.github.io/post/an-zhuang-nodejs/">
        </link>
        <updated>2020-04-22T10:44:16.000Z</updated>
        <summary type="html"><![CDATA[<p>🚗 从这里开始你的 Node.js 之旅！</p>
]]></summary>
        <content type="html"><![CDATA[<p>🚗 从这里开始你的 Node.js 之旅！</p>
<!-- more -->
<h1 id="0-下载">0. 下载</h1>
<p>链接：</p>
<blockquote>
<p><a href="https://nodejs.org/zh-cn/">官网</a><br>
<a href="https://npm.taobao.org/mirrors/node/">阿里云镜像</a></p>
</blockquote>
<p>在上面的网站里面找到你适用于你系统的安装包并下载。注意，在官网下载的话可能速度会比较慢，建议从阿里云镜像中下载。</p>
<h1 id="1-安装">1. 安装</h1>
<p>下载好后就打开，因为我用的是windows，所以我这里就用windows下的安装来做例子：<br>
<img src="https://kingsingledog.github.io//post-images/1586505151478.png" alt="" loading="lazy"><br>
点击<code>next</code><br>
<img src="https://kingsingledog.github.io//post-images/1586505335442.png" alt="" loading="lazy"><br>
勾选上同意协议后<code>next</code><br>
<img src="https://kingsingledog.github.io//post-images/1586505164472.png" alt="" loading="lazy"><br>
继续<code>next</code><br>
最后等待几分钟就安装完成了。</p>
<h1 id="2-验证">2. 验证</h1>
<p>打开power shell或者其他命令行终端，输入<code>node -v</code>来查看node的版本，如果输出一个版本号即说明node.js已经安装成功了。</p>
<h1 id="3-使用-cnpm-作为包管理器">3. 使用 cnpm 作为包管理器</h1>
<p>npm是node.js的包管理器，但由于npm默认的源是在国外的，访问速度实在感人，所以在这里我建议你使用 <a href="https://developer.aliyun.com/mirror/NPM?from=tnpm">淘宝npm镜像</a> 来进行包管理。在命令行输入：</p>
<pre><code class="language-shell">npm install -g cnpm --registry=https://registry.npm.taobao.org
</code></pre>
<p>即可自动安装cnpm。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 翻译文本]]></title>
        <id>https://kingsingledog.github.io/post/python3-shi-xian-fan-yi/</id>
        <link href="https://kingsingledog.github.io/post/python3-shi-xian-fan-yi/">
        </link>
        <updated>2020-04-17T10:29:29.000Z</updated>
        <summary type="html"><![CDATA[<p>🐍 Python 翻译文本的几种方案</p>
]]></summary>
        <content type="html"><![CDATA[<p>🐍 Python 翻译文本的几种方案</p>
<!-- more -->
<h2 id="0-调用-googletrans-库">0. 调用 googletrans 库</h2>
<h3 id="01-安装">0.1 安装：</h3>
<pre><code class="language-bash">$ pip install googletrans
</code></pre>
<h3 id="02-调用">0.2 调用：</h3>
<pre><code class="language-python">from googletrans import Translator

# 中 -&gt; 英
print(translator_google.translate('你好，世界！', dest='en').text)
# 英 -&gt; 中
print(translator_google.translate('Hello World!', dest='zh-CN').text)
</code></pre>
<p>完整使用请参考：<a href="https://pypi.org/project/py-translate/">py-translate · pypi</a></p>
<h3 id="03-报错">0.3 报错：</h3>
<blockquote>
<p>不出意外的话，在使用过程中会出现连接超时等报错，这是因为它默认调用的接口在墙外，我们需要手动修改模块的源码把<code>translate.google.com</code>修改为<code>translate.google.cn</code>。具体操作如下：</p>
<p>分别打开<code>/Python路径/Lib/site-packages/googletrans</code>中的<code>gtoken.py</code>、<code>urls.py</code>和<code>client.py</code>，把这三个文件中的<code>translate.google.com</code>修改为<code>translate.google.cn</code>即可。</p>
</blockquote>
<h3 id="04-笔记">0.4 笔记：</h3>
<blockquote>
<p>谷歌翻译一次最多5000字符，大概就是500个单词，20-30句话左右，每次翻译时间1s以内，所以如果翻译的文本较长，建议拆分为5000个字符一段一段的来翻译，并使用多线程，能大幅度提升翻译效率。</p>
</blockquote>
<h2 id="1-使用网页接口">1. 使用网页接口</h2>
<p>这种方法主要是调用百度等平台的翻译接口，需要自行去注册</p>
<h3 id="11-导入模块">1.1 导入模块</h3>
<pre><code class="language-python">import re
import urllib.parse, urllib.request
import hashlib
import urllib
import random
import json
import time
</code></pre>
<h3 id="12-百度翻译">1.2 百度翻译</h3>
<pre><code class="language-python">appid = 'your_appid'
secretKey = 'your_secretKey'
url_baidu = 'http://api.fanyi.baidu.com/api/trans/vip/translate'

def translateBaidu(text, f='ja', t='zh'):
    salt = random.randint(32768, 65536)
    sign = appid + text + str(salt) + secretKey
    sign = hashlib.md5(sign.encode()).hexdigest()
    url = url_baidu + '?appid=' + appid + '&amp;q=' + urllib.parse.quote(text) + '&amp;from=' + f + '&amp;to=' + t + \
    '&amp;salt=' + str(salt) + '&amp;sign=' + sign
    response = urllib.request.urlopen(url)
    content = response.read().decode('utf-8')
    data = json.loads(content)
    result = str(data['trans_result'][0]['dst'])
    print(result)
</code></pre>
<p>参数：text--待翻文本，f--初始语言，t--目标语言，后面方法类似。</p>
<h3 id="13-有道翻译">1.3 有道翻译</h3>
<pre><code class="language-python">url_youdao = 'http://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule&amp;smartresult=ugc&amp;sessionFrom=' \
      'http://www.youdao.com/'
dict = {}
dict['type'] = 'AUTO'
dict['doctype'] = 'json'
dict['xmlVersion'] = '1.8'
dict['keyfrom'] = 'fanyi.web'
dict['ue'] = 'UTF-8'
dict['action'] = 'FY_BY_CLICKBUTTON'
dict['typoResult'] = 'true'

def translateYoudao(text):
    global dict
    dict['i'] = text
    data = urllib.parse.urlencode(dict).encode('utf-8')
    response = urllib.request.urlopen(url_youdao, data)
    content = response.read().decode('utf-8')
    data = json.loads(content)
    result = data['translateResult'][0][0]['tgt']
    print(result)
</code></pre>
<p>参数主要由字典dict指定，发现没有地方可以指定语言（可能是我没找到），测试结果是不管输入什么语言的文本，输出均是中文。</p>
<h3 id="14-谷歌翻译">1.4 谷歌翻译</h3>
<pre><code class="language-python">url_google = 'http://translate.google.cn'
reg_text = re.compile(r'(?&lt;=TRANSLATED_TEXT=).*?;')
user_agent = r'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) ' \
                 r'Chrome/44.0.2403.157 Safari/537.36'

def translateGoogle(text, f='ja', t='zh-cn'):
    values = {'hl': 'zh-cn', 'ie': 'utf-8', 'text': text, 'langpair': '%s|%s' % (f, t)}
    value = urllib.parse.urlencode(values)
    req = urllib.request.Request(url_google + '?' + value)
    req.add_header('User-Agent', user_agent)
    response = urllib.request.urlopen(req)
    content = response.read().decode('utf-8')
    data = reg_text.search(content)
    result = data.group(0).strip(';').strip('\'')
    print(result)
</code></pre>
<p>和上面两种方法一样，采用的是访问网页的形式来进行翻译。</p>
<h3 id="15-笔记">1.5 笔记</h3>
<blockquote>
<p>如果觉得耗时的话可以使用线程，能将翻译速度提升几倍。</p>
<p>本篇部分内容参考自<a href="https://www.cnblogs.com/tgyf/p/6936221.html">python有哪些好用的语言翻译方法 - 路上的脚印</a></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 wechaty 来构建微信机器人]]></title>
        <id>https://kingsingledog.github.io/post/shi-yong-wechaty-lai-gou-jian-wei-xin-ji-qi-ren/</id>
        <link href="https://kingsingledog.github.io/post/shi-yong-wechaty-lai-gou-jian-wei-xin-ji-qi-ren/">
        </link>
        <updated>2020-04-10T02:51:52.000Z</updated>
        <summary type="html"><![CDATA[<p>🤖 你的下一个女友，何必是“女”友</p>
]]></summary>
        <content type="html"><![CDATA[<p>🤖 你的下一个女友，何必是“女”友</p>
<!-- more -->
<h1 id="0-wechaty-介绍">0. wechaty 介绍</h1>
<p>官方说明：</p>
<blockquote>
<p>Wechaty is a Bot SDK for Wechat Individual Account which can help you create a bot in 6 lines of javascript, with cross-platform support including Linux, Windows, MacOS, and Docker.</p>
</blockquote>
<p>链接：</p>
<blockquote>
<p><a href="https://github.com/wechaty/wechaty">wechaty（基于web协议）</a><br>
<a href="https://wechaty.github.io/wechaty">wechaty 官方文档</a></p>
</blockquote>
<p>总结起来就是，你可以使用node.js调用wechaty库来做出你自己的机器人。值得注意的是，当前微信web协议不支持登录2017年后注册的微信，如果你的微信是2017年后才注册的，请去找ipad协议的api。</p>
<p>既然要用到node.js和wechaty库，那我们首先要做的就是安装它们。</p>
<h1 id="1-安装-nodejs">1. 安装 Node.js</h1>
<p>👉 <a href="https://kingsingledog.github.io/post/an-zhuang-nodejs/">安装 Node.js</a></p>
<h1 id="2-使用-wechaty">2. 使用 wechaty</h1>
<p>如官方介绍所言，构建一个机器人只需要简单几步：</p>
<h2 id="21-初始化环境">2.1 初始化环境</h2>
<pre><code class="language-shell">npm init
</code></pre>
<p>或</p>
<pre><code class="language-shell">cnpm init
</code></pre>
<blockquote>
<p>注：初次使用cnpm可能会报“因为在此系统中禁止执行脚本”错误，解决方法参见<a href="https://kingsingledog.github.io/post/za-han/#powershell-%E5%9B%A0%E4%B8%BA%E5%9C%A8%E6%AD%A4%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%A6%81%E6%AD%A2%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95">PowerShell “因为在此系统中禁止执行脚本”的解决方法</a>，解决后重新执行<code>cnpm init</code>命令即可。</p>
</blockquote>
<p>接着会要求你输入项目名称和作者等信息，没有特殊要求的话可以一路回车跳过。</p>
<h2 id="22-安装wechaty">2.2 安装wechaty</h2>
<pre><code class="language-shell">npm install wechaty
</code></pre>
<p>或</p>
<pre><code class="language-shell">cnpm install wechaty
</code></pre>
<h2 id="23-创建js文件">2.3 创建js文件</h2>
<pre><code class="language-shell">touch robot.js
</code></pre>
<h3 id="24-写入代码">2.4 写入代码</h3>
<p>在<code>robot.js</code>文件中写入以下代码：</p>
<pre><code class="language-js">const { Wechaty } = require('wechaty') 
// import { Wechaty } from 'wechaty'

Wechaty.instance() // Global Instance
    .on('scan', (qrcode, status) =&gt; console.log(`Scan QR Code to login: ${status}\nhttps://api.qrserver.com/v1/create-qr-code/?data=${encodeURIComponent(qrcode)}`))
    .on('login', user =&gt; console.log(`User ${user} logined`))
    .on('message', message =&gt; console.log(`Message: ${message}`))
    .start()
</code></pre>
<h3 id="25-运行代码">2.5 运行代码</h3>
<pre><code class="language-shell">node robot.js
</code></pre>
<h3 id="26-修改代码">2.6 修改代码</h3>
<p>如果以上步骤你都运行成功的话，那你现在应该会很想修改代码来实现自己的机器人了，在这里附上几个你可能用得上的链接：</p>
<blockquote>
<p><a href="https://www.runoob.com/nodejs">Node.js教程 - 菜鸟教程</a><br>
<a href="https://wechaty.github.io/wechaty">wechaty 官方文档</a></p>
</blockquote>
<p>祝你玩的开心！</p>
<p>以上。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git常用命令]]></title>
        <id>https://kingsingledog.github.io/post/git-chang-yong-ming-ling/</id>
        <link href="https://kingsingledog.github.io/post/git-chang-yong-ming-ling/">
        </link>
        <updated>2020-04-08T10:46:27.000Z</updated>
        <summary type="html"><![CDATA[<p>👾 git常用到的命令</p>
]]></summary>
        <content type="html"><![CDATA[<p>👾 git常用到的命令</p>
<!-- more -->
<h2 id="无脑操作新手专属">无脑操作（新手专属）</h2>
<pre><code class="language-shell"># 克隆仓库到本地
git clone [仓库地址]

# 打开本地仓库
cd [仓库名]

# 修改文件
......

# 添加全部修改过的内容到暂存区
git add --all

# 提交修改
git commit -m &quot;本次提交的说明&quot;

# 推送到远程仓库
git push -u origin master
</code></pre>
<p>下面的是更多的一些命令，事实上，你只要在命令行输入<code>git</code>就可以查看全部git命令了</p>
<h2 id="新建仓库">新建仓库</h2>
<pre><code class="language-shell"># 在本地创建一个名为[项目名称]的仓库
git init [项目名称]

# 克隆仓库到本地
git clone [仓库链接]
</code></pre>
<h2 id="配置">配置</h2>
<pre><code class="language-shell"># 显示配置列表
git config --list

# 修改配置中的用户名
git config [--global] user.name &quot;[用户名]&quot;

# 修改配置中的邮箱地址
git config [--global] user.email &quot;[邮箱地址]&quot;
</code></pre>
<h2 id="增加删除文件">增加/删除文件</h2>
<pre><code class="language-shell"># 添加当前工作区的全部文件到暂存区
git add --all

# 添加指定文件到暂存区
git add [文件1] [文件2] [文件3]

# 添加文件夹到暂存区，包括子目录
git add [文件夹]

# 添加当前目录到暂存区
git add .

# 添加每个变化前都会要求确认
git add -p

# 删除工作区的指定文件并把这次删除放入暂存区
git rm [文件1] [文件2] [文件3]

# 停止追踪指定文件，但该文件会保留在工作区
git rm --cached [文件]

# 移动文件，可用来重命名文件
git mv [原文件] [移动后的文件]
</code></pre>
<h2 id="提交代码">提交代码</h2>
<h2 id="分支">分支</h2>
<h2 id="标签">标签</h2>
<h2 id="查看信息">查看信息</h2>
<h2 id="远程同步">远程同步</h2>
<h2 id="撤销">撤销</h2>
<h2 id="其他">其他</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[言函]]></title>
        <id>https://kingsingledog.github.io/post/yan-han/</id>
        <link href="https://kingsingledog.github.io/post/yan-han/">
        </link>
        <updated>2020-04-05T11:11:33.000Z</updated>
        <summary type="html"><![CDATA[<p>🙇 汇集喜欢的名言</p>
]]></summary>
        <content type="html"><![CDATA[<p>🙇 汇集喜欢的名言</p>
<!-- more -->
<ol>
<li>你日渐平庸，甘于平庸，将继续平庸。—— 《以自己喜欢的方式过一生》</li>
<li>我将融入剧烈争斗的大人世界，要在那边孤军奋战，必须变得比任何人都坚不可摧。——《海边的卡夫卡》</li>
<li>且视他人之疑目如盏盏鬼火，大胆地去走你的夜路。——史铁生《病隙碎笔》</li>
<li>所有的不平淡，都是在忍耐了足够的平淡之后诞生的。——《白说》</li>
<li>在最深的绝望里，遇见最美丽的风景。——几米</li>
<li>总是有人要赢的，那为什么不能是我呢？——科比·布莱恩特</li>
<li>不要嘲笑那些比你们拼命努力的人，也不要理会那些嘲笑你拼命努力的人。——松下幸之助</li>
<li>你那么憎恨那些人，和他们斗了那么久，最终却要变得和他们一样，人世间没有任何理想值得以这样的沉沦作为代价。——马尔克斯《百年孤独》</li>
<li>把最复杂的变成最简单的，才是最高明的。——达·芬奇</li>
<li>大雨可以延迟我们到达的时间，但不能阻止我们前进。——卢梭</li>
<li>如果结果不如你所愿，就在尘埃落定前奋力一搏。——《夏目友人帐》</li>
<li>每个人为了活下去都必须找到点燃自己心头之火的力量，那烈焰就是灵魂的食粮。——刘同</li>
<li>绝不放弃之心，将成为贯穿逆境之光。——《妖精的尾巴》</li>
<li>没有不可治愈的伤痛，没有不能结束的沉沦，所有失去的，会以另一种方式归来。——约翰·肖尔斯</li>
<li>我们仍需与生命的慷慨与繁华相爱，即使岁月以荒芜和刻薄相欺。——《尘曲》</li>
<li>天空黑暗到一定程度，星辰就会熠熠生辉。——比尔德</li>
<li>今天所有的混乱与芜杂，努力与精进，都将在进步中变得更加清晰。——新京报</li>
<li>维持现状意味着空耗你的努力和生命。——纪伯伦</li>
<li>有些事不是看到了希望才去坚持，而是因为坚持才会看到希望。——《十宗罪》</li>
<li>不必行色匆匆，不必光芒四射，不必成为别人，只需做自己。——弗吉尼亚·伍尔夫</li>
<li>人生太短，要干的事太多，我要争分夺秒。——爱迪生</li>
<li>迷路就是走路的一部分。 ——几米</li>
<li>上帝只会给你能挺得过去的考验。——《仁医》</li>
<li>趁我们头脑发热，我们要不顾一切。——波德莱尔</li>
<li>但凡不能杀死你的，最终都会使你更强大。——尼采</li>
<li>人有逆天之时，天无绝人之路。——《醒世恒言》</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[敲简单的正则表达式教程]]></title>
        <id>https://kingsingledog.github.io/post/qiao-jian-dan-de-zheng-ze-biao-da-shi-jiao-cheng/</id>
        <link href="https://kingsingledog.github.io/post/qiao-jian-dan-de-zheng-ze-biao-da-shi-jiao-cheng/">
        </link>
        <updated>2020-04-02T01:02:15.000Z</updated>
        <summary type="html"><![CDATA[<p>🤡 这是一篇敲简单的正则表达式教程哇</p>
]]></summary>
        <content type="html"><![CDATA[<p>🤡 这是一篇敲简单的正则表达式教程哇</p>
<!-- more -->
<h2 id="简介">📜简介</h2>
<h3 id="正则表达式是啥">🤔 正则表达式是啥？</h3>
<p>正则表达式是一种拿来匹配文字的规则。</p>
<h3 id="它有啥用">🙄 它有啥用？</h3>
<p>比如你在编辑一段文字的时候，如果你需要搜索文字内容里面某一个特定的字符串的时候你可能会点击菜单中的搜索按钮来搜索那个字符串。然而这种操作并非屡试不爽，有时你会遇到这种情况：文本内包含有很多有规律的字符串，比如“第一章”、“第二章”、“第三章”这种，而且这样的字符串在文本里面还有很多，你总不能一个个的搜索并删掉吧，因为这实在太考验人的耐性了。这个时候，一个叫做正则表达式的工具可以让你的搜索变得事半功倍。像上面这种情况你只需要在搜索框中输入：</p>
<pre><code>第.+?章
</code></pre>
<p>就可以匹配到全部类似于“第__章”的字符串了！<br>
很香🍚有木有？ 下面就来介绍一下它的食用方法了！🍴</p>
<h2 id="食用方法">🍣 食用方法</h2>
<p>和平时的文字不同，正则表达式是一种可以保留一些未知量的字符串，也就是一种规则，正则匹配就是找到符合这一规则的文本，我先举个栗子🌰：</p>
<p>如你所见，一条简单的正则表达式无非是由<code>普通字符</code>，<code>限定符</code>，<code>定位符</code>组成，以下是三者的基本概念：</p>
<h3 id="普通字符">🍞普通字符：</h3>
<p>何为普通字符？在表达式<code>第.+?章</code>里面，<code>第</code>、<code>章</code>这类直接匹配的字符我们就称之为普通字符，而像<code>.</code>、<code>+</code>、<code>?</code>这类用来描述规则的有特殊含义的字符就是特殊字符了。但是如果我们要匹配一个和特殊字符一样的普通字符呢，比如我们要匹配一条数学式子<code>1+1=2</code>，这里就包含有<code>+</code>，而它在这里仅仅是一个普通字符，所以我们在写表达式的时候可以使用转义符<code>\</code>来使特殊字符转义成普通字符，即<code>\+</code>就代表了一个形为<code>+</code>的普通字符。</p>
<p>除此之外，如果我们要匹配一些类似与回车或者空格之类的非打印字符怎么办？这里是一个关于非打印字符的表格，你可以使用下列的字符来取代回车和空格之类的非打印字符！</p>
<table>
<thead>
<tr>
<th style="text-align:left">字符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">\cx</td>
<td style="text-align:left">匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。</td>
</tr>
<tr>
<td style="text-align:left">\f</td>
<td style="text-align:left">匹配一个换页符。等价于 \x0c 和 \cL。</td>
</tr>
<tr>
<td style="text-align:left">\n</td>
<td style="text-align:left">匹配一个换行符。等价于 \x0a 和 \cJ。</td>
</tr>
<tr>
<td style="text-align:left">\r</td>
<td style="text-align:left">匹配一个回车符。等价于 \x0d 和 \cM。</td>
</tr>
<tr>
<td style="text-align:left">\s</td>
<td style="text-align:left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。</td>
</tr>
<tr>
<td style="text-align:left">\S</td>
<td style="text-align:left">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td>
</tr>
<tr>
<td style="text-align:left">\t</td>
<td style="text-align:left">匹配一个制表符。等价于 \x09 和 \cI。</td>
</tr>
<tr>
<td style="text-align:left">\v</td>
<td style="text-align:left">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td>
</tr>
</tbody>
</table>
<h3 id="限定符">🥓限定符：</h3>
<table>
<thead>
<tr>
<th style="text-align:left">字符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:left">匹配前面的子表达式零次或多次。例如，zo* 能匹配 &quot;z&quot; 以及 &quot;zoo&quot;。* 等价于{0,}。</td>
</tr>
<tr>
<td style="text-align:left">+</td>
<td style="text-align:left">匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 &quot;zo&quot; 以及 &quot;zoo&quot;，但不能匹配 &quot;z&quot;。+ 等价于 {1,}。</td>
</tr>
<tr>
<td style="text-align:left">?</td>
<td style="text-align:left">匹配前面的子表达式零次或一次。例如，&quot;do(es)?&quot; 可以匹配 &quot;do&quot; 、 &quot;does&quot; 中的 &quot;does&quot; 、 &quot;doxy&quot; 中的 &quot;do&quot; 。? 等价于 {0,1}。</td>
</tr>
<tr>
<td style="text-align:left">{n}</td>
<td style="text-align:left">n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 &quot;Bob&quot; 中的 'o'，但是能匹配 &quot;food&quot; 中的两个 o。</td>
</tr>
<tr>
<td style="text-align:left">{n,}</td>
<td style="text-align:left">n 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 &quot;Bob&quot; 中的 'o'，但能匹配 &quot;foooood&quot; 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。</td>
</tr>
<tr>
<td style="text-align:left">{n,m}</td>
<td style="text-align:left">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，&quot;o{1,3}&quot; 将匹配 &quot;fooooood&quot; 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。</td>
</tr>
</tbody>
</table>
<p>看的明白这个表格嘛？如果你已经明白了，则可以跳过这几段直接看下一个内容<a href="https://kingsingledog.github.io/post/qiao-jian-dan-de-zheng-ze-biao-da-shi-jiao-cheng/#%E5%AE%9A%E4%BD%8D%E7%AC%A6">定位符</a></p>
<p>如果你没看懂上表的话也没关系，在往下读之前，你只需了解有哪几个限定符就够了，下面我会为你介绍每一个的具体用法。</p>
<p>限定符，顾名思义就是拿来限定它前面的那个字符出现次数的，举个栗子🌰：</p>
<pre><code>1. runb
2. runob
3. runoob
4. runooob
5. runoooo...b
</code></pre>
<p>上面有五个字符串，它们之间唯一的不同点就是<code>o</code>的数量不一样，其中<code>5</code>号还是无限多的！<br>
下面我们分别用不同的限定符去匹配这些字符串。</p>
<pre><code>甲. runo*b
乙. runo+b
丙. runo?b
</code></pre>
<p>三条表达式都在<code>o</code>的后面使用了限定符，那不同限定符的匹配结果会是如何？<br>
经过测试后我们可以得到如下结果</p>
<pre><code>甲：1、2、3、4、5
乙：2、3、4、5
丙：1、2
</code></pre>
<p>为什么会这样？</p>
<p>我们先来看<code>*</code>，它的类似与我们数学运算中的乘号，乘上一个数，而这个数可以是0，可以是1，还可以是其它的任何数，也就是意味着<code>*</code>前面那个字符可以出现0到无穷次，所以就有匹配到<code>0号</code>这种没有<code>o</code>的字符串和有多个<code>o</code>的字符串。</p>
<p>接下来看<code>+</code>，和<code>*</code>类似，也是与数学运算中的<code>+</code>差不多，它可以匹配一个到无穷个<code>o</code>，但匹配不到没有<code>o</code>的那个，这就是它为什么匹配不到<code>1</code>号的原因。</p>
<p>还有就是<code>?</code>，它可以匹配零个或一个字符，也就是它前面那个字符可以存在一个也可以不存在，所以它只能匹配到<code>1</code>和<code>2</code>。</p>
<p>上面这三个限定符已经可以满足你大部分需求了，但是如果你遇到了这种情况：你想匹配一个文件中的全部电话号码，你选择了上面的<code>*</code>或<code>+</code>来匹配，你却发现匹配结果里面连邮政编码都一起匹配出来了，你才想起，邮政编码也是由一串数字组成的，显然这不是我们想要的结果。</p>
<p>如何解决呢，还记得上面表格里还有一种限定符我们没有使用吧，它就是<code>{n, m}</code><br>
这里的<code>n</code>和<code>m</code>是两个数字，一个是起始数量，一个是终止数量，也就是说，它可以匹配带有<code>n</code>到<code>m</code>个字符的字符串。有点懵？没关系，我们再来举个🌰：</p>
<p>上面说到我们在匹配电话号码的时候却连邮政编码都匹配出来了，然而聪明的我们发现，手机号码一般为十一位数，而邮政编码只有六位数，这时候我们就可以使用我们的<code>{n, m}</code>限定符来匹配包含十一位数的电话号码了：<code>[0-9]{11}</code>。</p>
<p>这时候你可能会发现，我只在<code>{ }</code>里面填了一个数，这是因为我们是准确知道电话号码是十一位数的，我们填一个数进去就是精准匹配的意思，也就是<code>{n}</code>的形式，如果我要匹配十一位数或以上的号码呢，那只需在<code>n</code>的后面加上一个<code>,</code>即可，它代表着匹配十一位到无穷多的字符，而少于十一位的就不匹配。那如果我想要匹配十一位到十五位的字符呢，这时就要用到<code>{11, 15}</code>这样的表达式来限制了。</p>
<p>以上就是限定符的基本内容了👐</p>
<h3 id="定位符">🍕定位符</h3>
<table>
<thead>
<tr>
<th style="text-align:left">字符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">^</td>
<td style="text-align:left">匹配输入字符串开始的位置。</td>
</tr>
<tr>
<td style="text-align:left">$</td>
<td style="text-align:left">匹配输入字符串结尾的位置。</td>
</tr>
<tr>
<td style="text-align:left">\b</td>
<td style="text-align:left">匹配一个单词边界，即字与空格间的位置。</td>
</tr>
<tr>
<td style="text-align:left">\B</td>
<td style="text-align:left">非单词边界匹配。</td>
</tr>
</tbody>
</table>
<h3 id="正则表达式测试工具">🛠 正则表达式测试工具</h3>
<p><a href="https://c.runoob.com/front-end/854">正则表达式在线测试 - 菜鸟教程</a></p>
<h3 id="其他">🙆‍♂其他</h3>
<p>部分内容参考自 <a href="https://www.runoob.com/regexp/regexp-tutorial.html">正则表达式 | 菜鸟教程</a></p>
<p>以上。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[杂函]]></title>
        <id>https://kingsingledog.github.io/post/za-han/</id>
        <link href="https://kingsingledog.github.io/post/za-han/">
        </link>
        <updated>2020-04-02T00:05:46.000Z</updated>
        <summary type="html"><![CDATA[<p>📝 一些乱七八糟的笔记</p>
]]></summary>
        <content type="html"><![CDATA[<p>📝 一些乱七八糟的笔记</p>
<!-- more -->
<h2 id="0-win10-关闭开机启动项">0. win10 关闭开机启动项</h2>
<p>步骤如下：</p>
<ol>
<li>打开任务管理器</li>
<li>切换到“启动”选项卡</li>
<li>右键需要禁用的任务进行具体操作</li>
</ol>
<h2 id="1-win10-快捷键">1. win10 快捷键</h2>
<ul>
<li>快捷菜单：<strong>Win + X</strong></li>
<li>剪切板：<strong>Win + V</strong></li>
<li>截图：<strong>Win + Shift + S</strong></li>
<li>表情和特殊符号：<strong>Ctrl + Shift + B</strong></li>
<li>打开“此电脑”：<strong>Win + E</strong></li>
</ul>
<h2 id="2-pip-更换下载源">2. pip 更换下载源</h2>
<pre><code class="language-shell">$ pip install pqi #安装 pqi
$ pqi ls # 显示全部源
$ pqi use aliyuan # 使用源
</code></pre>
<p>来自：<a href="https://jingyan.baidu.com/article/455a995067da61a16727785a.html">pip下载Python扩展包时如何提高下载速度</a></p>
<h2 id="3-网页在线工具万能命令">3. 网页在线工具（万能命令）</h2>
<p>在任意网址前面添加输入<code>wn.run/</code>，例如：<br>
把<code>https://www.iqiyi.com/</code>编辑成<code>wn.run/https://www.iqiyi.com/</code><br>
然后回车进入即可看见该网站能用的工具了。</p>
<p>详细用法请参考：<a href="https://wanneng.run/cn/">万能命令</a></p>
<h2 id="4-linux-登录问候语">4. Linux 登录问候语</h2>
<pre><code class="language-shell">$ vi /etc/motd
</code></pre>
<p>来自：<a href="https://blog.csdn.net/rrlyrstar/article/details/79226190">Linux登录问候语</a></p>
<h2 id="5-linux-开机启动脚本">5. Linux 开机启动脚本</h2>
<p>系统启动后会自动执行<code>/etc/profile.d/</code>下的所有shell脚本，所以将写好的脚本（.sh文件）放到目录<code>/etc/profile.d/</code>下即可。</p>
<p>来自：<a href="https://www.jb51.net/article/176257.htm">Linux 添加开机启动方法(服务/脚本)</a></p>
<h2 id="6-excel的实用技巧">6. Excel的实用技巧</h2>
<p>Office的软件往往大而全，学习成本非常大。有时候可以掌握一些小技巧，用一些巧劲让处理“更省事”，比较知名的比如 <strong>Ctrl+E</strong> 。它可以有点类似“重复上一步”的功能，绝大多数人眼可以观察出来的规律，它都可以做到：<br>
比如，在某个内容后面加一个固定的东西了。你只需要手动改第一个，然后按 <strong>Ctrl+E</strong> ：</p>
<p>再比如说把一段完整的内容分割成几部分了（为防止随机数生成出真实手机号影响他人，均打码一位）：<strong>Ctrl+E！</strong></p>
<p>一键提取出某个部分，再与另外的内容组合：<strong>Ctrl+E！</strong></p>
<p>或者你想从一大段完整的信息中，提取出某个部分来：<strong>Ctrl+E！</strong></p>
<p>甚至将几部分的内容整合为一句完整的话：<strong>Ctrl+E！</strong></p>
<p>来自：<a href="https://www.zhihu.com/question/352321370/answer/989335660">知乎：作为一名在校大学生不会用电脑怎么办？ - 求学时 的回答</a></p>
<h2 id="7-魔方还原机器人">7. 魔方还原机器人</h2>
<p>原理图：</p>
<p>来自：<a href="https://www.zhihu.com/question/23149991/answer/988550313">知乎：怎么能做出一台在 5 秒内解开魔方的机器人 ？</a></p>
<h2 id="8-powershell-因为在此系统中禁止执行脚本的解决方法">8. PowerShell “因为在此系统中禁止执行脚本”的解决方法</h2>
<p>以管理员身份运行powershell，然后执行以下命令：</p>
<pre><code class="language-shell">set-ExecutionPolicy RemoteSigned
</code></pre>
<p>更改执行策略，然后输入<code>Y</code>确认即可。</p>
<p>来自：<a href="https://www.jb51.net/article/95022.htm">PowerShell因为在此系统中禁止执行脚本的解决方法</a></p>
<h2 id="9-uwp应用-loopback-权限">9. UWP应用 loopback 权限</h2>
<p>解锁UWP应用 loopback 权限(访问本机)</p>
<pre><code class="language-shell">checknetisolation loopbackexempt -a -n=&quot;1F8B0F94.122165AE053F_j2p0p5q0044a6&quot;
</code></pre>
<p>如果你取消解锁，即恢复原状，那么请执行：</p>
<pre><code class="language-shell">checknetisolation loopbackexempt -d -n=&quot;1F8B0F94.122165AE053F_j2p0p5q0044a6&quot;
</code></pre>
<h2 id="网页文字编辑">网页文字编辑</h2>
<pre><code class="language-js">document.body.contentEditable='true';
</code></pre>
]]></content>
    </entry>
</feed>